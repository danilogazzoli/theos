unit TestCalculadoraUn;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, CalculadoraUn;

type
  // Test methods for class TCalculadora

  TestTCalculadora = class(TTestCase)
  strict private
    FCalculadora: TCalculadora;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSomar;
    procedure TestMultiplicar;
    procedure TestSubtrair;
    procedure TestDividir;
  end;
  // Test methods for class TImpostoCalc

  TestTImpostoCalc = class(TTestCase)
  strict private
    FImpostoCalc: TImpostoCalc;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetImpostoA;
    procedure TestGetImpostoB;
    procedure TestGetImpostoC;
  end;

implementation

procedure TestTCalculadora.SetUp;
begin
  FCalculadora := TCalculadora.Create;
end;

procedure TestTCalculadora.TearDown;
begin
  FCalculadora.Free;
  FCalculadora := nil;
end;

procedure TestTCalculadora.TestSomar;
var
  ReturnValue: Double;
  ValorB: Double;
  ValorA: Double;
begin
  // TODO: Setup method call parameters
  ValorA := 10;
  ValorB := 5;
  ReturnValue := FCalculadora.Somar(ValorA, ValorB);
  // TODO: Validate method results
  Check(ReturnValue = 15, 'Soma incorreta' );
end;

procedure TestTCalculadora.TestMultiplicar;
var
  ReturnValue: Double;
  ValorB: Double;
  ValorA: Double;
begin
  // TODO: Setup method call parameters
  ValorA := 10;
  ValorB := 5;
  ReturnValue := FCalculadora.Multiplicar(ValorA, ValorB);
  // TODO: Validate method results
  Check(ReturnValue = 50, 'Multiplicação incorreta' );
end;

procedure TestTCalculadora.TestSubtrair;
var
  ReturnValue: Double;
  ValorB: Double;
  ValorA: Double;
begin
  // TODO: Setup method call parameters
  ValorA := 10;
  ValorB := 5;

  ReturnValue := FCalculadora.Subtrair(ValorA, ValorB);
  // TODO: Validate method results
  Check(ReturnValue = 5, 'Subtração incorreta' );
end;

procedure TestTCalculadora.TestDividir;
var
  ReturnValue: Double;
  ValorB: Double;
  ValorA: Double;
begin
  // TODO: Setup method call parameters
  ValorA := 10;
  ValorB := 2;
  ReturnValue := FCalculadora.Dividir(ValorA, ValorB);
  // TODO: Validate method results
  Check(ReturnValue = 5, 'Divisão incorreta' );
end;

procedure TestTImpostoCalc.SetUp;
begin
  FImpostoCalc := TImpostoCalc.Create;
end;

procedure TestTImpostoCalc.TearDown;
begin
  FImpostoCalc.Free;
  FImpostoCalc := nil;
end;

procedure TestTImpostoCalc.TestGetImpostoA;
var
  ReturnValue: Double;
  aBaseCalculo: Double;
begin
  // TODO: Setup method call parameters
  aBaseCalculo := 5000;
  ReturnValue := FImpostoCalc.GetImpostoA(aBaseCalculo);
  // TODO: Validate method results
  Check(ReturnValue = -400, 'Imposto A incorreto');
end;

procedure TestTImpostoCalc.TestGetImpostoB;
var
  ReturnValue: Double;
  aBaseCalculo: Double;
begin
  // TODO: Setup method call parameters
  aBaseCalculo := 5000;
  ReturnValue := FImpostoCalc.GetImpostoB(aBaseCalculo);
  // TODO: Validate method results
  Check(ReturnValue = -415, 'Imposto B incorreto');
end;

procedure TestTImpostoCalc.TestGetImpostoC;
var
  ReturnValue: Double;
  aBaseCalculo: Double;
begin
  // TODO: Setup method call parameters
  aBaseCalculo := 5000;
  ReturnValue := FImpostoCalc.GetImpostoC(aBaseCalculo);
  // TODO: Validate method results
  Check(ReturnValue = -815, 'Imposto C incorreto');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTCalculadora.Suite);
  RegisterTest(TestTImpostoCalc.Suite);
end.

